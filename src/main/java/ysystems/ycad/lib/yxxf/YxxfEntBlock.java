//==============================================================================
// YxxfEntBlock.java
//
// BLOCK entity
//==============================================================================

//==============================================================================
// Ycad - Java CAD library
// Copyright (c) 2003 - Ed Karlo - mailto:ekarlo@ysystems.com
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//==============================================================================

//==============================================================================
// $Header: /cvsroot/ycad/ycad/src/com/ysystems/ycad/lib/yxxf/YxxfEntBlock.java,v 1.22 2003/05/08 11:24:03 ekarlo Exp $
// $Log: YxxfEntBlock.java,v $
// Revision 1.22  2003/05/08 11:24:03  ekarlo
// Remove warnings.
//
// Revision 1.21  2003/04/14 12:38:42  ekarlo
// Update source file header for OSI release.
//
// Revision 1.20  2002/09/25 19:37:48  ekarlo
// Use better Vector clear method plus Old Navigator complained.
//
// Revision 1.19  2002-09-12 14:03:27-06  ekarlo
// MTEXT development check-in.
//
// Revision 1.18  2000-10-17 01:43:58-06  ekarlo
// Change package paths to lower case.
//
// Revision 1.17  1999-10-22 01:28:03-06  ekarlo
// API rework - phase 1.
//
// Revision 1.16  1999-09-28 11:11:07-06  walter
// Add JavaDoc comments.
//
// Revision 1.15  1999-07-09 14:10:50-06  ekarlo
// Rearrange package names.
//
// Revision 1.14  1999/06/20  22:34:10  ekarlo
// Rearrange package names.
//
// Revision 1.13  1999/02/08  05:11:02  ekarlo
// Improve table and keyword lookups.
//
// Revision 1.12  1999/02/02  01:51:17  ekarlo
// Put associated ATTDEFs in block.
//
// Revision 1.11  1999/01/28  04:32:33  ekarlo
// Text - phase 4.
//
// Revision 1.10  1997/08/30  14:20:13  ekarlo
// Remove debug code.
//
// Revision 1.9  1997/07/23  14:19:28  ekarlo
// Move get thread out of main thread.
//
// Revision 1.8  1997/07/21  22:53:33  ekarlo
// Make fields public for static get.
// Release all waiting threads.
//
// Revision 1.7  1996/09/26  02:06:13  ekarlo
// Remove unused code.
//
// Revision 1.6  1996/09/14  03:28:01  ekarlo
// Connect layer in add entity methods.
//
// Revision 1.5  1996/09/13  05:59:24  ekarlo
// Use new base entity class structure.
//
// Revision 1.4  1996/08/19  18:48:47  ekarlo
// 1) Change argument names to match class var names.
// 2) Reorder wait ready code.
// 3) Removed unused local var.
//
// Revision 1.3  1996/07/30  07:00:50  ekarlo
// 1) Use point class.
// 2) Call function to draw status indicators.
//
// Revision 1.2  1996/07/02  04:50:33  ekarlo
// 1) Add basepntz.
// 2) Add comments.
//
// Revision 1.1  1996/07/02  02:20:22  ekarlo
// Initial revision
//
//==============================================================================


package com.ysystems.ycad.lib.yxxf;


import java.util.*;

import com.ysystems.lib.yutil.*;


/**
 * BLOCK entity.
 * @author Ed Karlo - Y Systems, LLC
 */
public class YxxfEntBlock extends YxxfEntHeader implements YxxfEnt
{
    /**
     * code   1 - Xref path name (if the block is an xref) (optional).
     */
    public
    String                      blockname1;

    /**
     * code   2 - Block name [seems to be main name] - key value.
     */
    private
    char[]                      blockname2;
    private
    int                         blockname2len;

    /**
     * code   3 - Block name.
     */
    public
    String                      blockname3;

    /**
     * code  10,20,30 - Block base point.
     */
    public
    YxxfGfxPointW               basepnt         = new YxxfGfxPointW();

    /**
     * code  70 - Block-type bit-coded flags.
     *<UL>
     *  <LI>1 = This is an anonymous block generated by hatching,
     *          associative dimensioning, other internal operations, or an
     *          application.
     *  <LI>2 = This block has attribute definitions.
     *  <LI>4 = This block is an external reference (xref).
     *  <LI>8 = Not used.
     *  <LI>16 = This block is externally dependent.
     *  <LI>32 = This is a resolved external reference, or dependent
     *           of an external reference.
     *  <LI>64 = This definition is referenced.
     *</UL>
     */
    public
    int                         flags           = 0;


    /**
     * Block entities list.
     */
    private
    Vector                      blkEntities     = new Vector();


    /**
     * Block entities list Complete state
     */
    private
    boolean                     blkComplete     = false;


    /**
     * Block attdef list
     */
    private
    Vector                      blkAttdef       = new Vector();


    /**
     * Constructor
     */
    public
    YxxfEntBlock()
    {
        blockname2 = new char[0]; // set really empty
        blockname2len = -1;
    }


    /**
     * Constructor
     * @param arg_blockname2 The name of the Entity Block.
     */
    public
    YxxfEntBlock(String arg_blockname2)
    {
        blockname2len = arg_blockname2.length();
        blockname2 = new char[blockname2len];
        for (int i = 0; i < blockname2len; i++)
            blockname2[i] = arg_blockname2.charAt(i);
    }


    /**
     * Constructor
     * @param arg_blockname2 The name of the Entity Block.
     */
    public
    YxxfEntBlock(char[] arg_blockname2)
    {
        blockname2len = arg_blockname2.length;
        blockname2 = new char[blockname2len];
        for (int i = 0; i < blockname2len; i++)
            blockname2[i] = arg_blockname2[i];
    }


    /**
     * Set the value of blockname2.
     * @param arg_blockname2 The name of the Entity Block.
     */
    public
    void setBlockname2(char[] arg_blockname2)
    {
        int len = arg_blockname2.length;

        // check capacity
        if (len > blockname2len)
            blockname2 = new char[len];

        for (int i = 0; i < len; i++)
            blockname2[i] = arg_blockname2[i];

        blockname2len = len;
    }


    /**
     * Set the value of blockname2.
     * @param arg_blockname2 The name of the Entity Block.
     */
    public
    void setBlockname2(String arg_blockname2)
    {
        int len = arg_blockname2.length();

        // check capacity
        if (len > blockname2len)
            blockname2 = new char[len];

        for (int i = 0; i < len; i++)
            blockname2[i] = arg_blockname2.charAt(i);

        blockname2len = len;
    }


    /**
     * Set the value of blockname2.
     * @param arg_blockname2 The name of the Entity Block.
     */
    public
    void setBlockname2(StringBuffer arg_blockname2)
    {
        int len = arg_blockname2.length();

        // check capacity
        if (len > blockname2len)
            blockname2 = new char[len];

        for (int i = 0; i < len; i++)
            blockname2[i] = arg_blockname2.charAt(i);

        blockname2len = len;
    }


    /**
     * Set the value of blockname2.
     * @param arg_blockname2 The name of the Entity Block.
     */
    public
    void setBlockname2(YutilCharBuffer arg_blockname2)
    {
        int len = arg_blockname2.length();

        // check capacity
        if (len > blockname2len)
            blockname2 = new char[len];

        for (int i = 0; i < len; i++)
            blockname2[i] = arg_blockname2.charAt(i);

        blockname2len = len;
    }


    /**
     * Get the value of blockname2
     * @return The name of the Entity Block.
     */
    public
    String getBlockname2()
    {
        if (blockname2len != blockname2.length)
        {
            char[] newname = new char[blockname2len];
            for (int i = 0; i < blockname2len; i++)
                newname[i] = blockname2[i];
            return new String(newname);
        }
        else
            return new String(blockname2);
    }


    /**
     * Calculate a hash value for blockname2.
     * @return The hash value.
     */
    public
    int hashCode()
    {
        int hc = 0;

         for (int i = 0; i < blockname2len; i++)
            hc = (hc * 37) + blockname2[i];

        return hc;
    }


    /**
     * Compare the blockname2 values of obj and this Entity Block.
     * @param obj The YxxfEntBlock  or blockname2.
     * @return true if they are the same.
     */
    public
    boolean equals(Object obj)
    {
        if (obj == null)
            return false;

        if (obj instanceof YxxfEntBlock)
        {
            YxxfEntBlock block = (YxxfEntBlock)obj;
            if (blockname2len == block.blockname2len)
            {
                for (int i = 0; i < blockname2len; i++)
                {
                    if (blockname2[i] != block.blockname2[i])
                    {
                        return false;
                    }
                }
                return true;
            }
        }
        else

        if (obj instanceof String)
        {
            String block = (String)obj;
            if (blockname2len == block.length())
            {
                for (int i = 0; i < blockname2len; i++)
                {
                    if (blockname2[i] != block.charAt(i))
                    {
                        return false;
                    }
                }
                return true;
            }
        }
        else

        if (obj instanceof StringBuffer)
        {
            StringBuffer block = (StringBuffer)obj;
            if (blockname2len == block.length())
            {
                for (int i = 0; i < blockname2len; i++)
                {
                    if (blockname2[i] != block.charAt(i))
                    {
                        return false;
                    }
                }
                return true;
            }
        }

        return false;
    }


    /**
     * Copy the values of blk into this Entity Block.
     * @param blk The source Entity Block.
     */
    public
    void copyInto(YxxfEntBlock blk)
    {
        ((YxxfEntHeader)blk).copyHeaderInto(blk);

        blk.blockname1          = blockname1;


        // copyInto block key
        int len = blk.blockname2.length;

        // check capacity
        if (blockname2len > len)
            blk.blockname2 = new char[blockname2len];

        for (int i = 0; i < blockname2len; i++)
            blk.blockname2[i] = blockname2[i];

        blk.blockname2len = blockname2len;


        blk.blockname3          = blockname3;
        basepnt.copyInto(blk.basepnt);
        blk.flags               = flags;

        blk.blkEntities         = (Vector)blkEntities.clone();
        blk.blkComplete         = blkComplete;

        blk.blkAttdef           = (Vector)blkAttdef.clone();
    }




    /**
     * Set the value of the Complete status flag.
     * @param blkComplete The Complete status value.
     * @return The Complete status value.
     */
    public synchronized
    boolean setBlockComplete(boolean blkComplete)
    {

//      if (blkComplete)
//          System.out.println("YxxfEntBlock:setBlockComplete  |TRUE              " + "blockname2=[" + blockname2 + "]");
//      else
//          System.out.println("YxxfEntBlock:setBlockComplete  |FALSE             " + "blockname2=[" + blockname2 + "]");
        return this.blkComplete = blkComplete;
    }


    /**
     * Get the next Block Entity from the collection.
     * @return Next Object from the blkEntities collection.
     */
    public synchronized
    Object nextEntity(int nextToDraw)
    {
        while (true)
        {
            if (nextToDraw >= blkEntities.size())
            {
                if (blkComplete)
                {
                    return null;
                }

                //System.out.println("nextEntity:wait");

                try { wait(); }
                catch(InterruptedException e) { System.out.println(e); }

                continue;
            }
            return blkEntities.elementAt(nextToDraw);
        }
    }




    /**
     * Add an Entity to the blkEntities collection and notify all listeners 
     * that this state has changed.
     */
    public synchronized
    void addEntity(YxxfEnt ent)
    {
        blkEntities.addElement(ent);
        notifyAll();
    }


    /**
     * Remove all items from the entities list.
     */
    public synchronized
    void clearEntities()
    {
        blkEntities.removeAllElements();
    }


    /**
     * Add an entity to the blkAttdef collection.
     */
    public synchronized
    void addEntityAttdef(YxxfEnt ent)
    {
        blkAttdef.addElement(ent);
//      notifyAll();
    }


    /**
     * Remove all items from the attributes list.
     */
    public synchronized
    void clearAttdefs()
    {
        blkAttdef.removeAllElements();
    }


    /**
     * Send a notification to listeners.
     */
    public synchronized
    void drawNotify()
    {
        notifyAll();
    }


    /**
     * Return the size of the list.
     * @return The size of the blkEntities list.
     */
    public synchronized
    int size()
    {
        return blkEntities.size();
    }


    /**
     * Disable the draw method. The Entity Block is drawin by the
     * Insert type entity.
     * @param gc The Graphics Context
     */
    public
    void draw(YxxfGfxContext gc)
    {
        // Drawn by insert type entity
    }


    /**
     * Calculate block transmat.
     * @param D The drawing.
     */
    public
    void calc(Yxxf D)
    {
        //
        // connect
        //
        hdr_calc(D);
    }
}

